import requests

from typing import NamedTuple, List, Dict
import itertools
from collections import defaultdict


def get_repo_name_from_url(url: str) -> str:
    list_of_names = url.strip("/").split("/")
    repo = list_of_names[-1]
    author = list_of_names[-2]
    repo_full_name = f"{author}/{repo}"
    return repo_full_name


class Issue(NamedTuple):
    title: str
    body: str
    risk: float

    def __repr__(self):
        return f"<Issue title={self.title} risk={self.risk}>"


HIGH = 5
MEDIUM = 3
LOW = 1

risk_keywords: Dict[str, list] = {
    "high": [
        "vulnerability",
        "security",
        "owasp",
        "csrf",
        "xss",
        "sql injection",
        "ddos",
        "malware",
        "xsrf",
        "injection",
        "format string",
        "overflow",
        "xpath",
        "cache poisoning",
    ],
    "medium": ["sigsegv", "segmentation"],
    "low": ["API", "token", "todo", "password", "sudo"],
}

# https://github.com/invertase/react-native-firebase/
# repo_name = get_repo_name_from_url(input("Enter URL of the repository: "))
repo_name = "invertase/react-native-firebase"
issues: Dict[str, list] = defaultdict(list)
final_risk = 0
for risk_word, keywords in risk_keywords.items():
    for keyword in keywords:
        resp = requests.get(
            f"https://api.github.com/search/issues?q={keyword}+repo:{repo_name}+type:issue",
        ).json()
        try:
            for issue in resp["items"]:
                risk = (
                    locals()[risk_word.upper()] * issue["score"]
                )  # adjust the factor with the relevance of the topic
                final_risk += risk
                issues[risk_word].append(
                    Issue(title=issue["title"], body=issue["body"], risk=risk)
                )
        except KeyError:
            pass

print(issues)
print(final_risk)

# TODO:
# add issues by score
# add more keywords
# async
# descriptor for risk to not got above 100
# refactor
